
package miniexplorer;

import java.awt.FileDialog;
import java.io.File;
import java.io.FileInputStream;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Scanner;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JTabbedPane;
import javax.swing.JTable;


/**
 *
 * @author AMAN
 */
public class dubCheck extends javax.swing.JFrame implements Runnable {

    
    ArrayList<File> ar = new ArrayList<File>();
    ArrayList<File> dub = new ArrayList<File>();
    ArrayList indexes = new ArrayList();
    
    boolean toadd = false;
    int dubFileCount =0;
    int totalFileCount =0;
    long dubFileSize = 0;
    int value =0;
    long totalsize = 0;
    long currentsize =0;
    long size = 0;
    boolean start = true;
    HashSet<Integer> hs = new HashSet<Integer>();
  //  HashSet<duplicate> dubl = new HashSet<duplicate>();
    Thread t;
    public dubCheck() {
        initComponents();
        t = new Thread(this);
        
        
    }
    
    public void run()
    {
        try
        {
         
            while(true)
            {
                jTextField1.setText(""+totalFileCount);
                float f1 =(float)currentsize;
                float f2 = (float)totalsize;
                value = (int) (f1/f2 * 100);
                jProgressBar1.setValue(value);
                if(value ==100)
                {
                    break;
                }
                System.out.println(value);
                File demo = new File("g://aa");
                //totalsize = checkSize(demo) ;


                File sub[] = demo.listFiles();
                if(sub != null)
                {
                    for(int i=0;i<sub.length;i++)
                    {
                        checkDublicacy(sub[i]);
                    }
                }
                
                
           } 
//           System.out.println(ar);
//            for(int i=0;i<ar.size();i++)
//            {
//                toadd = true;
//                for(int j=i+1;j<ar.size();j++)
//                {

//                    boolean b = true;
//                    for(int k=0;k<indexes.size();k++)
//                    {
//                            duplicate obj = (duplicate) indexes.get(k);
//                            int index = obj.index;
//                        if( index ==j || index ==i)
//                        {
//                            b = false;
//                        }
//                    }
//                    if(b)
//                    {
//                        File f1 = (File)ar.get(i);
//                        File f2 = (File) ar.get(j);
//                        check(f1,f2,i,j);
//                    }
//                    System.out.println(hs.size());
//                    System.out.println(hs);
//                    boolean b1 = hs.contains(j);
//                    boolean b2 = hs.contains(i);
//                    boolean b3 = b1 || b2;
                   // if(! (hs.contains(new Integer(j)) || hs.contains(new Integer(i))))
//                    {
//                        File f1 = (File)ar.get(i);
//                        File f2 = (File) ar.get(j);
//                        check(f1,f2,i,j);
//                    }
//                }
//            }
            mergeSort();
            dubcheck();

            if(indexes != null)
            {
                Iterator i1 = indexes.iterator();
                String cols[] = {"File Name","File Path","Size(in KB)"};
                String data[][]= new String[indexes.size()][3];
                int i,j;
                i=0;
                j=0;
                while(i1.hasNext())
                {
                    duplicate obj = (duplicate) i1.next();
                    File temp = obj.f;
                    data[i][j] = temp.getName();
                    data[i][++j] = temp.getParent();
                    data[i][++j] = (temp.length()/1024)+" kb";
                    i++;
                    j=0;
                    System.out.println(temp.getName());
                }
                jTable1 = new JTable(data,cols);
                jScrollPane2.setViewportView(jTable1);
                this.revalidate();
            }
    
        }
        catch(Exception e)
        {
            System.out.println(e);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        list1 = new java.awt.List();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        String cols[] = {"File Name","Path","Size"};
        String data[][] = {{"","",""}};
        jTable1 = new javax.swing.JTable(data,cols);
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Duplicate file finder");

        jScrollPane1.setViewportView(list1);

        jButton2.setText("Select Path To scan ->");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Clear The List");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 670, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jButton1.setText("Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 415, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(jButton1)
                .addGap(57, 57, 57))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jButton1)
            .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jScrollPane2.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 816, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel1.setForeground(new java.awt.Color(255, 0, 0));
        jLabel1.setText("This list contains dublicate files");

        jTextField1.setColumns(15);

        jLabel2.setText("Files Scanned");

        jLabel3.setText("Duplicate Files :");

        jTextField2.setColumns(15);

        jLabel4.setText("Disk Space Wastage");

        jTextField3.setColumns(15);
        jTextField3.setToolTipText("");

        jLabel5.setText("What To do with duplicate files?");

        jButton4.setText("Move To Folder");

        jButton5.setText("Move To Recycle Bin");

        jButton6.setText("Delete Permanently");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(52, 52, 52)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(29, 29, 29)
                        .addComponent(jButton4)
                        .addGap(18, 18, 18)
                        .addComponent(jButton5)
                        .addGap(18, 18, 18)
                        .addComponent(jButton6)))
                .addContainerGap(78, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jButton4)
                    .addComponent(jButton5)
                    .addComponent(jButton6))
                .addContainerGap())
        );

        jCheckBox1.setSelected(true);
        jCheckBox1.setText("Protect system Folder (Windows, Program Files)");

        jCheckBox2.setSelected(true);
        jCheckBox2.setText("Protect Other System Files(.dll,.dat,.sys.)");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox1)
                    .addComponent(jCheckBox2))
                .addContainerGap(312, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox2)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(178, Short.MAX_VALUE)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(59, 59, 59))
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 535, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(663, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(375, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(399, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    indexes = new ArrayList();
    t.start();
}//GEN-LAST:event_jButton1ActionPerformed

private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

    JFrame jf = new JFrame();
    FileDialog fd = new FileDialog(jf,"select path to scan..");
    fd.setVisible(true);
    fd.setSize(300,300);
    JFileChooser jfs = new JFileChooser();
    String path = fd.getDirectory() + fd.getFile();
    if(fd.getFile() != null)
    {
        list1.add(path);
    }
}//GEN-LAST:event_jButton2ActionPerformed

public  void check(File fil1, File fil2,int i,int j)
{
    if(fil1.length() == fil2.length())
    {
        duplicate obj = new duplicate();
//        if(toadd == true)
//        {
//            obj.index = i;
//            obj.f = f1;
//            indexes.add(obj);
//            toadd = false;
//        }
        
        try
        {
            FileInputStream fis1 = new FileInputStream(fil1);
            FileInputStream fis2 = new FileInputStream(fil2);
            byte b1[] = new byte[(int)fil1.length()];
            byte b2[] = new byte[(int) fil2.length()];
            int smaller;
            if(b1.length>b2.length)
            {
                smaller = b2.length;
            }
            else
            {
                smaller = b1.length;
            }
            
 
            fis1.read(b1);
            fis2.read(b2);
            boolean flag = true;
            for(int l=0;l<smaller;l++)
            {
                if(b1[l] != b2[l])
                {
                    flag = true;
                    break;
                }
                else
                {
                   flag = false;
                }
                
                if(l== 100)
                {
                    break;
                }
            }
            if(flag == false)
            {
                obj.index = j;
                   obj.f = fil2;
                   indexes.add(obj);
                   dubFileCount++;
                   hs.add(new Integer(i));
                   hs.add(new Integer(j));
                   //dubl.add(obj);
                   jTextField2.setText(""+dubFileCount);
            }
        }
        catch(Exception e)
        {
            System.out.println(e);
        }
       
    }
}
public void checkDublicacy(File f)
{
    
    if(f.isDirectory())
    {
        File sub[] = f.listFiles();
        if(sub != null)
        {
            for(int i=0;i<sub.length;i++)
            {
                checkDublicacy(sub[i]);
            }
        }
    }
    else
    {
//        if(start)
//        {
//            ar.add(f);
//            start = false;
//        }
//        Iterator itr = ar.iterator();
//        boolean check = true;
//         
//            if()
//            
//            if(f.length() <= temp.length())
//            {
//                if(f.length() == temp.length())
//                {
//                    duplicate obj = new duplicate();
//                    obj.f = f;
//                    indexes.add(f);
//                    check = false;
//                    break;
//                    //sortAdd(f);
//                }
//                
//            }
//            else
//            {
//                break;
//            }
//        }
//        if(check)
//        {
//            ar.add(f);
//            int k=0;
//            for( k=ar.size();k>i;k--)
//            {
//                
//                int x =k-1;
//                File addf = (File)ar.get(k-1);
//                ar.add(k, addf);
//                
//            }
//            ar.add(k,f);
//            currentsize = currentsize + f.length();
//            totalFileCount++;
//        }
//        
        
    }
}

//public void sortAdd(File fil)
//{
//    for(int i=1;i<ar.len)
//
//}

public void mergeSort()
{
    int i=0;
        for( i=1;i<ar.size();i++)
        {
            int j=i;
            
            while(j>0  &&  ((File)ar.get(j)).length() > ((File)ar.get(j-1)).length())
            {
                File temp = (File) ar.get(j);
                ar.add(j, (File)ar.get(j-1));
                ar.add(j-1, temp);
                j--;
                
            }
        }   
}

public void dubcheck()
{
    for(int i=0;i<ar.size();i++)
    {
        File item =(File) ar.get(i);
        int j=i;
        while(item.length()<= ((File)ar.get(j)).length()  && j<=ar.size())
        {
            if(item.length()== ((File)ar.get(j)).length())
            {
                indexes.add(item);
            }j++;
        }
        i=j;
        
    }
}
long checkSize(File f)
{
    File sub[] = f.listFiles();
    if(sub != null || sub.length ==0)
    {
        for(int i=0;i<sub.length;i++)
        {
            if(sub[i].isDirectory())
            {
                checkSize(sub[i]);
            }
            else
            {
                size = size + sub[i].length();
            }
        }
    }
    else
    {
        size = size + f.length();
    }
    return size;
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(dubCheck.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(dubCheck.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(dubCheck.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(dubCheck.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new dubCheck().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private java.awt.List list1;
    // End of variables declaration//GEN-END:variables

}
//class duplicate
//{
//    int index;
//    File f;
//   // int dupGroup;
//    
//}